<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
    <!-- In addition to @RolesAllowed on UIs (see AdminView), one can also use basic 
    security-constraint rules. This web.xml file is only needed to demonstrate this. -->
    <security-constraint>
        <display-name>SecureUIConstraint</display-name>
        <web-resource-collection>
            <web-resource-name>SecuredUI</web-resource-name>
            <description>The authenticated part of the app</description>
            <!-- SecureUI is mapped into this url -->
            <url-pattern>/secure/*</url-pattern>
        </web-resource-collection>
        <auth-constraint>
            <description>Only valid users are allowed</description>
            <role-name>Users</role-name>
        </auth-constraint>
    </security-constraint>
    <!-- This rule shows LoginUI instead of SecureUI non logged in users -->
    <login-config>
        <!-- We are not actually using FORM, method either but Vaadin UI,
            set method to FORM so BASIC is not used.
        -->
        <auth-method>FORM</auth-method>
        <realm-name>fileRealm</realm-name>
        <form-login-config>
            <form-login-page>/login</form-login-page>
            <form-error-page>/login</form-error-page>
        </form-login-config>
    </login-config>
    <security-role>
        <role-name>Users</role-name>
    </security-role>

</web-app>
